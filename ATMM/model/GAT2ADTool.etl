pre {
  "Running ETL".println();
  
  //Create the root node of the XML adtree
  ADTool.root = new ADTool!t_adtree;
}

post {
  "Done".println();
}

rule GAT2ADTool 	
	transform r : AT!ATNode
	to f : ADTool!t_node {
	
	//Set refinement attribute of node
	f.a_refinement= r.findRefinement();
	
	// Create and add label to the current node.
	var label = new ADTool!t_label;
	label.text = r.Name;
	f.appendChild(label);
	
	// Append all attribute nodes to the current node
	// Invoke the lazy rule for all attributes (by using equivalent())
	// then append all children XML nodes to the current node.
  	for (child in r.Attributes.equivalent()) {
    	f.appendChild(child);
  	}
	
	// If the parent ATNode has a different role, add 'switchRole' attribute to the XML node.
	if(r.Parents.size() > 0 and r.Parents.first().Role <> r.Role ){
		f.a_switchRole = "yes";
	}

	// Append all child ATNodes to the current node in the XML
	for (child in r.Children.equivalent()) {
    	f.appendChild(child);
  	}
  	
  	// Append the current node to the root (Not sure why this works, as it is called for all nodes)
  	ADTool.root.appendChild(f);
	
		
}

@lazy
rule Attribute2Param
	transform a : AT!ATAttribute
	to p : ADTool!t_parameter{
	
	p.a_domainId = a.DomainID;
	p.text = a.Value;
}

// Simply transform each domain into an XML domain and attach it to the root
rule GATDomain2ADToolDomain 
	transform at : AT!Domain
	to ad : ADTool!t_domain {
	
	var class = new ADTool!t_class;
	class.text = at.Class;
	var tool = new ADTool!t_tool;
	tool.text = at.Tool;
	ad.a_id = at.ID; 
	
	ad.appendChild(class);
	ad.appendChild(tool);
	ADTool.root.appendChild(ad); 	
}

// Find the string version of the refinement of ATNode
operation AT!ATNode findRefinement() : String{
	if(self.Type == AT!ATType#OR){
		return "disjunctive";
	} else if(self.Type == AT!ATType#AND){
		return "conjuctive";
	}
	
	return "default";	
}

